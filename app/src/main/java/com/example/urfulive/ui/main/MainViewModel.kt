package com.example.urfulive.ui.main

import android.util.Log
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.ViewModel
import androidx.compose.ui.graphics.Color
import androidx.lifecycle.viewModelScope
import com.example.urfulive.data.api.PostApiService
import com.example.urfulive.data.api.UserApiService
import com.example.urfulive.data.manager.DtoManager
import com.example.urfulive.data.model.Post
import com.example.urfulive.ui.search.SearchViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.sync.Mutex
import kotlinx.coroutines.sync.withLock

data class PostColorPattern(
    val background: Color,
    val buttonColor: Color,
    val textColor: Color,
    val reactionColor: Color,
    val reactionColorFilling: Color
)

private val postColorPattern = listOf(
    PostColorPattern(
        background = Color(0xFFB2DF8A),
        buttonColor = Color(0xFFF6ECC9),
        textColor = Color.Black,
        reactionColor = (Color(0xFF6E9A3C)),
        reactionColorFilling = (Color(0xFF4A6828)),
    ),
    PostColorPattern(
        background = Color(0xFFEBE6FD),
        buttonColor = Color(0xFFBA55D3),
        textColor = Color.Black,
        reactionColor = (Color(0xFF8C3F9F)),
        reactionColorFilling = (Color(0xFF5E2A6B)),
    ),
    PostColorPattern(
        background = Color(0xFFF6ECC9),
        buttonColor = Color(0xFFEE7E56),
        textColor = Color.Black,
        reactionColor = (Color(0xFFAE451F)),
        reactionColorFilling = (Color(0xFF702E16)),
    ),
)

val PostColorPatterns: List<PostColorPattern> get() = postColorPattern

// üéØ –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê: –¢–æ–ª—å–∫–æ UI —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
data class PostUiState(
    val isProcessing: Boolean = false,
    val isSubscriptionLoading: Boolean = false
)

class PostViewModel : ViewModel() {
    private val postApiService = PostApiService()
    private val userApiService = UserApiService()

    private val postsUpdateMutex = Mutex()
    private val connectedSearchViewModels = mutableSetOf<SearchViewModel>()

    // üìä –û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï
    private val _posts = MutableStateFlow<List<Post>>(emptyList())
    val posts: StateFlow<List<Post>> get() = _posts

    private val _currentUserId = MutableStateFlow<String?>(null)
    val currentUserId: StateFlow<String?> get() = _currentUserId

    private val _subscriptions = MutableStateFlow<Set<String>>(emptySet())
    val subscriptions: StateFlow<Set<String>> = _subscriptions

    // üéÆ UI –°–û–°–¢–û–Ø–ù–ò–Ø (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞)
    private val _postsUiState = mutableStateOf<Map<Long, PostUiState>>(emptyMap())
    val postsUiState: Map<Long, PostUiState> by _postsUiState

    init {
        viewModelScope.launch {
            TokenManagerInstance.getInstance().userId.collect { userId ->
                Log.d("PostViewModel", "üîÑ User ID changed: $userId")
                _currentUserId.value = userId

                if (userId != null) {
                    Log.d("PostViewModel", "‚úÖ User authorized, User ID: $userId")
                    // üéØ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
                    fetchPosts()
                } else {
                    Log.d("PostViewModel", "‚ùå User not authorized")
                    // –û—á–∏—â–∞–µ–º –ø–æ—Å—Ç—ã –ø—Ä–∏ —Ä–∞–∑–ª–æ–≥–∏–Ω–µ
                    _posts.value = emptyList()
                }
            }
        }
    }

    private fun fetchPosts() {
        viewModelScope.launch {
            val result = postApiService.getRecommendation(0)
            result.onSuccess { postList ->
                val dtoManager = DtoManager()
                val posts = postList.map { dtoManager.run { it.toPost() } }
                _posts.value = posts
                initializeUiStates(posts)
                initSubscriptions(posts)
            }.onFailure {
                viewModelScope.launch {
                    val newResult = postApiService.getAll()
                    newResult.onSuccess { dtoPosts ->
                        val dtoManager = DtoManager()
                        val posts = dtoPosts.map { dtoManager.run { it.toPost() } }
                        _posts.value = posts
                        initializeUiStates(posts)
                        initSubscriptions(posts)
                    }.onFailure {
                        it.printStackTrace()
                    }
                }
            }
        }
    }

    private fun initializeUiStates(posts: List<Post>) {
        val uiStates = posts.associate { post ->
            post.id to PostUiState(
                isProcessing = false,
                isSubscriptionLoading = false
            )
        }
        _postsUiState.value = uiStates
    }

    private fun initSubscriptions(posts: List<Post>) {
        val userId = _currentUserId.value?.toInt() ?: return
        val authorIds = posts
            .filter { post -> post.author.followers.contains(userId) }
            .map { it.author.id }
            .toSet()
        _subscriptions.value = authorIds
    }

    // üéØ –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–û–î–´: –ò—Å–ø–æ–ª—å–∑—É—é—Ç –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∞–π–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞
     */
    fun isPostLikedByCurrentUser(postId: Long): Boolean {
        val userId = _currentUserId.value?.toInt() ?: return false
        val post = _posts.value.find { it.id == postId } ?: return false
        return post.likedBy.contains(userId)
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –∏–∑ –†–ï–ê–õ–¨–ù–û–ì–û –ø–æ—Å—Ç–∞
     */
    fun getPostLikesCount(postId: Long): Int {
        val post = _posts.value.find { it.id == postId } ?: return 0
        return post.likes
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    fun isPostProcessing(postId: Long): Boolean {
        return _postsUiState.value[postId]?.isProcessing ?: false
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ª–∞–π–∫–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
     */
    fun likeAndDislike(postId: Long) {
        Log.d("PostViewModel", "üéØ START likeAndDislike for post $postId")

        viewModelScope.launch {
            // === –ü–†–û–í–ï–†–ö–ê 1: –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ ===
            val currentPost = _posts.value.find { it.id == postId }
            if (currentPost == null) {
                Log.e("PostViewModel", "‚ùå CRITICAL ERROR: Post $postId NOT FOUND in main list")
                Log.d("PostViewModel", "üìä Available posts: ${_posts.value.map { it.id }}")
                return@launch
            }
            Log.d("PostViewModel", "‚úÖ Post found: ${currentPost.title}")

            // === –ü–†–û–í–ï–†–ö–ê 2: UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ ===
            val currentUiState = _postsUiState.value[postId]
            if (currentUiState == null) {
                Log.e("PostViewModel", "‚ùå CRITICAL ERROR: UI State for post $postId NOT FOUND")
                Log.d("PostViewModel", "üìä Available UI states: ${_postsUiState.value.keys}")
                return@launch
            }
            Log.d("PostViewModel", "‚úÖ UI State found: $currentUiState")

            // === –ü–†–û–í–ï–†–ö–ê 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ ===
            if (currentUiState.isProcessing) {
                Log.w("PostViewModel", "‚ö†Ô∏è Post $postId is already processing - BLOCKING")
                return@launch
            }

            // === –ü–†–û–í–ï–†–ö–ê 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ===
            val userId = _currentUserId.value?.toInt()
            if (userId == null) {
                Log.e("PostViewModel", "‚ùå CRITICAL ERROR: User ID is NULL")
                Log.d("PostViewModel", "üìä Current user value: ${_currentUserId.value}")
                return@launch
            }
            Log.d("PostViewModel", "‚úÖ User ID: $userId")

            // === –ü–†–û–í–ï–†–ö–ê 5: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–π–∫–∞ ===
            val isCurrentlyLiked = currentPost.likedBy.contains(userId)
            Log.d("PostViewModel", "üìä BEFORE LIKE STATE:")
            Log.d("PostViewModel", "   Currently liked: $isCurrentlyLiked")
            Log.d("PostViewModel", "   Likes count: ${currentPost.likes}")
            Log.d("PostViewModel", "   LikedBy list: ${currentPost.likedBy}")

            // === –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò ===
            Log.d("PostViewModel", "üîÑ Setting processing state...")
            updatePostUiState(postId) { it.copy(isProcessing = true) }

            // === –û–ü–¢–ò–ú–ò–°–¢–ò–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï ===
            Log.d("PostViewModel", "‚ö° Applying optimistic update...")
            val updatedPost = optimisticallyUpdatePost(currentPost, userId, isCurrentlyLiked)

            Log.d("PostViewModel", "üìä AFTER OPTIMISTIC UPDATE:")
            Log.d("PostViewModel", "   New likes count: ${updatedPost.likes}")
            Log.d("PostViewModel", "   New likedBy list: ${updatedPost.likedBy}")

            // üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢: –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            try {
                Log.d("PostViewModel", "üåç Calling updatePostEverywhere...")
                updatePostEverywhere(updatedPost)
                Log.d("PostViewModel", "‚úÖ updatePostEverywhere completed")
            } catch (e: Exception) {
                Log.e("PostViewModel", "üí• updatePostEverywhere FAILED: ${e.message}")
                e.printStackTrace()
            }

            // === API –í–´–ó–û–í ===
            try {
                Log.d("PostViewModel", "üåê Making API call...")
                val result = if (isCurrentlyLiked) {
                    Log.d("PostViewModel", "üî• SENDING DISLIKE for post $postId")
                    postApiService.dislike(postId)
                } else {
                    Log.d("PostViewModel", "‚ù§Ô∏è SENDING LIKE for post $postId")
                    postApiService.like(postId)
                }

                result.onSuccess { response ->
                    Log.d("PostViewModel", "‚úÖ API SUCCESS for post $postId")
                    updatePostUiState(postId) { it.copy(isProcessing = false) }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    val finalPost = _posts.value.find { it.id == postId }
                    Log.d("PostViewModel", "üìä FINAL STATE:")
                    Log.d("PostViewModel", "   Final likes: ${finalPost?.likes}")
                    Log.d("PostViewModel", "   Final likedBy: ${finalPost?.likedBy}")

                }.onFailure { error ->
                    Log.e("PostViewModel", "‚ùå API FAILED for post $postId: ${error.message}")
                    // –û—Ç–∫–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
                    updatePostEverywhere(currentPost)
                    updatePostUiState(postId) { it.copy(isProcessing = false) }
                    error.printStackTrace()
                }
            } catch (e: Exception) {
                Log.e("PostViewModel", "üí• API EXCEPTION for post $postId: ${e.message}")
                updatePostEverywhere(currentPost)
                updatePostUiState(postId) { it.copy(isProcessing = false) }
                e.printStackTrace()
            }
        }
    }

    /**
     * –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Å—Ç
     */
    private fun optimisticallyUpdatePost(post: Post, userId: Int, wasLiked: Boolean): Post {
        val newLikedBy = post.likedBy.toMutableList()
        val newLikesCount = if (wasLiked) {
            newLikedBy.remove(userId)
            maxOf(0, post.likes - 1)
        } else {
            newLikedBy.add(userId)
            post.likes + 1
        }

        return post.copy(
            likes = newLikesCount,
            likedBy = newLikedBy
        )
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Å—Ç –≤ —Å–ø–∏—Å–∫–µ
     */
    private fun updatePostInList(updatedPost: Post) {
        val currentPosts = _posts.value.toMutableList()
        val index = currentPosts.indexOfFirst { it.id == updatedPost.id }
        if (index != -1) {
            currentPosts[index] = updatedPost
            _posts.value = currentPosts
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å—Ç–∞
     */
    private fun updatePostUiState(postId: Long, update: (PostUiState) -> PostUiState) {
        val currentStates = _postsUiState.value.toMutableMap()
        currentStates[postId]?.let { currentState ->
            currentStates[postId] = update(currentState)
            _postsUiState.value = currentStates
        }
    }

    // üîÑ –ü–û–î–ü–ò–°–ö–ò
    fun subscribeAndUnsubscribe(post: Post) {
        viewModelScope.launch {
            val authorId = post.author.id
            val currentUiState = _postsUiState.value[post.id] ?: return@launch

            if (currentUiState.isSubscriptionLoading) {
                return@launch
            }

            updatePostUiState(post.id) {
                it.copy(isSubscriptionLoading = true)
            }

            try {
                val isSubscribed = _subscriptions.value.contains(authorId)
                val result = if (!isSubscribed) {
                    userApiService.subscribe(authorId.toLong())
                } else {
                    userApiService.unsubscribe(authorId.toLong())
                }

                result.onSuccess {
                    updateSubscriptionStateLocally(authorId)
                    kotlinx.coroutines.delay(300)
                }.onFailure {
                    it.printStackTrace()
                }
            } catch (e: Exception) {
                e.printStackTrace()
            } finally {
                updatePostUiState(post.id) {
                    it.copy(isSubscriptionLoading = false)
                }
            }
        }
    }

    private fun updateSubscriptionStateLocally(authorId: String) {
        val currentSubscriptions = _subscriptions.value.toMutableSet()
        val isCurrentlySubscribed = currentSubscriptions.contains(authorId)

        if (isCurrentlySubscribed) {
            currentSubscriptions.remove(authorId)
        } else {
            currentSubscriptions.add(authorId)
        }
        _subscriptions.value = currentSubscriptions
    }

    // üîÑ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    fun reinitializeStates(posts: List<Post>) {
        initializeUiStates(posts)
        initSubscriptions(posts)
    }

    fun isUserSubscribe(post: Post): Boolean {
        return _subscriptions.value.contains(post.author.id)
    }

    fun isSubscriptionLoading(postId: Long): Boolean {
        return _postsUiState.value[postId]?.isSubscriptionLoading ?: false
    }

    /**
     * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç SearchViewModel –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    fun connectSearchViewModel(searchViewModel: SearchViewModel) {
        connectedSearchViewModels.add(searchViewModel)
        Log.d("PostViewModel", "üîó Connected SearchViewModel: ${searchViewModel.hashCode()}")
    }

    /**
     * –û—Ç–∫–ª—é—á–∞–µ—Ç SearchViewModel –æ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    fun disconnectSearchViewModel(searchViewModel: SearchViewModel) {
        connectedSearchViewModels.remove(searchViewModel)
        Log.d("PostViewModel", "üîå Disconnected SearchViewModel: ${searchViewModel.hashCode()}")
    }

    /**
     * üîÑ –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç—ã –∏–∑ –ø–æ–∏—Å–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–∞–π–∫–æ–≤
     */
    suspend fun addSearchPostsIfNeeded(searchPosts: List<Post>) {
        postsUpdateMutex.withLock {
            val currentPosts = _posts.value.toMutableList()
            val currentPostIds = currentPosts.map { it.id }.toSet()

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ
            val newPosts = searchPosts.filter { it.id !in currentPostIds }

            if (newPosts.isNotEmpty()) {
                currentPosts.addAll(newPosts)
                _posts.value = currentPosts

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
                val currentUiStates = _postsUiState.value.toMutableMap()
                newPosts.forEach { post ->
                    currentUiStates[post.id] = PostUiState(
                        isProcessing = false,
                        isSubscriptionLoading = false
                    )
                }
                _postsUiState.value = currentUiStates

                Log.d("PostViewModel", "‚úÖ Added ${newPosts.size} search posts to main list")
                Log.d("PostViewModel", "üìä Total posts now: ${_posts.value.size}")
            }
        }
    }

    /**
     * üîÑ –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Å—Ç –≤–æ –≤—Å–µ—Ö –º–µ—Å—Ç–∞—Ö –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ SearchViewModel
     */
    private suspend fun updatePostEverywhere(updatedPost: Post) {
        Log.d("PostViewModel", "üîÑ updatePostEverywhere START for post ${updatedPost.id}")

        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ
            Log.d("PostViewModel", "üìù Updating in main list...")
            updatePostInListSafe(updatedPost)

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å SearchViewModel
            Log.d("PostViewModel", "üîó Syncing with ${connectedSearchViewModels.size} SearchViewModels...")
            connectedSearchViewModels.forEach { searchViewModel ->
                try {
                    Log.d("PostViewModel", "   Syncing with SearchVM: ${searchViewModel.hashCode()}")
                    searchViewModel.updatePostInSearchResults(updatedPost)
                    Log.d("PostViewModel", "   ‚úÖ Sync successful")
                } catch (e: Exception) {
                    Log.e("PostViewModel", "   ‚ùå Sync failed: ${e.message}")
                }
            }

            Log.d("PostViewModel", "‚úÖ updatePostEverywhere COMPLETED")
        } catch (e: Exception) {
            Log.e("PostViewModel", "üí• updatePostEverywhere EXCEPTION: ${e.message}")
            e.printStackTrace()
            throw e
        }
    }

    // üéØ –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–û–î–´: –ò—Å–ø–æ–ª—å–∑—É—é—Ç –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞


    /**
     * Thread-safe –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
     */
    private suspend fun updatePostInListSafe(updatedPost: Post) {
        Log.d("PostViewModel", "üîí updatePostInListSafe START for post ${updatedPost.id}")

        postsUpdateMutex.withLock {
            val currentPosts = _posts.value.toMutableList()
            val index = currentPosts.indexOfFirst { it.id == updatedPost.id }

            Log.d("PostViewModel", "üîç Looking for post ${updatedPost.id} in list of ${currentPosts.size} posts")
            Log.d("PostViewModel", "üîç Found at index: $index")

            if (index != -1) {
                currentPosts[index] = updatedPost
                _posts.value = currentPosts
                Log.d("PostViewModel", "‚úÖ Updated post ${updatedPost.id} at index $index")
                Log.d("PostViewModel", "üìä New state - Likes: ${updatedPost.likes}, LikedBy: ${updatedPost.likedBy}")
            } else {
                Log.e("PostViewModel", "‚ùå Post ${updatedPost.id} NOT FOUND for update")
                Log.d("PostViewModel", "üìä Available post IDs: ${currentPosts.map { it.id }}")
            }
        }
    }

    /**
     * üìä –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    fun debugState() {
        Log.d("PostViewModel", "=== DEBUG STATE ===")
        Log.d("PostViewModel", "ViewModel instance: ${this.hashCode()}")
        Log.d("PostViewModel", "Posts count: ${_posts.value.size}")
        Log.d("PostViewModel", "Current user ID: ${_currentUserId.value}")
        Log.d("PostViewModel", "Connected SearchViewModels: ${connectedSearchViewModels.size}")
        _posts.value.forEach { post ->
            Log.d("PostViewModel", "Post ${post.id}: likes=${post.likes}, likedBy=${post.likedBy}")
        }
        Log.d("PostViewModel", "UI States: ${_postsUiState.value.keys}")
        Log.d("PostViewModel", "==================")
    }

    fun refreshUserAuth() {
        viewModelScope.launch {
            Log.d("PostViewModel", "üîÑ Manual auth refresh called")
        }
    }
}