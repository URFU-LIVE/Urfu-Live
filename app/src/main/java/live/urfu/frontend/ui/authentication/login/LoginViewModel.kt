import android.util.Log
import androidx.lifecycle.ViewModel
import live.urfu.frontend.data.DTOs.AuthResponse
import live.urfu.frontend.data.api.UserApiService
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

class LoginViewModel : ViewModel() {
    interface LoginCallback {
        fun onSuccess(user: AuthResponse)
        fun onError(error: Exception)
    }
    private val userApiService = UserApiService()

    private val _login = MutableStateFlow("")
    val login = _login.asStateFlow()

    private val _password = MutableStateFlow("")
    val password = _password.asStateFlow()

    fun onLoginChange(newValue: String) {
        _login.value = newValue
    }

    fun onPasswordChange(newValue: String) {
        _password.value = newValue
    }

    // todo –ß—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    fun onLoginClick(login: String, password: String, callback: LoginCallback) {
        CoroutineScope(Dispatchers.IO).launch {
            try {
                Log.d("LoginViewModel", "üîë LOGIN ATTEMPT for user: $login")
                val result = userApiService.login(login, password)

                withContext(Dispatchers.Main) {
                    if (result.isSuccess) {
                        callback.onSuccess(result.getOrThrow())
                    } else {
                        callback.onError(Exception("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))
                    }
                }
            } catch (e: Exception) {
                Log.e("LoginViewModel", "üí• LOGIN EXCEPTION: ${e.message}")
                withContext(Dispatchers.Main) {
                    callback.onError(e)
                }
            }
        }
    }

    // todo –£–±—Ä–∞—Ç—å —É–∂–µ –ø—Ä–æ—Ö–æ–¥
    // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ ¬´–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å¬ª
    fun onRestorePasswordClick() {
        // –õ–æ–≥–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ —Ç.–¥.)
    }

    // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å¬ª
    fun onRegisterClick() {
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    }
}
